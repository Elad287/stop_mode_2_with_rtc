
stop_mode_2_with_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001820  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080019b4  080019b4  000119b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019f4  080019f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080019f4  080019f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019f4  080019f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019f4  080019f4  000119f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019f8  080019f8  000119f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080019fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001a08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001a08  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000053c8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fae  00000000  00000000  00025404  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000558  00000000  00000000  000263b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004c0  00000000  00000000  00026910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020596  00000000  00000000  00026dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004b86  00000000  00000000  00047366  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5769  00000000  00000000  0004beec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111655  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001390  00000000  00000000  001116d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800199c 	.word	0x0800199c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800199c 	.word	0x0800199c

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa26 	bl	8000628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f80a 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f85a 	bl	8000298 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(10000);
 80001e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80001e8:	f000 fa96 	bl	8000718 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* Enter STOP 2 mode */
	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80001ec:	2001      	movs	r0, #1
 80001ee:	f000 fd91 	bl	8000d14 <HAL_PWREx_EnterSTOP2Mode>
 80001f2:	e7fb      	b.n	80001ec <main+0x18>

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b096      	sub	sp, #88	; 0x58
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0314 	add.w	r3, r7, #20
 80001fe:	2244      	movs	r2, #68	; 0x44
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fbc2 	bl	800198c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	463b      	mov	r3, r7
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000216:	2302      	movs	r3, #2
 8000218:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800021e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000220:	2340      	movs	r3, #64	; 0x40
 8000222:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000228:	2302      	movs	r3, #2
 800022a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800022c:	2301      	movs	r3, #1
 800022e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000230:	230a      	movs	r3, #10
 8000232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000234:	2307      	movs	r3, #7
 8000236:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000238:	2302      	movs	r3, #2
 800023a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800023c:	2302      	movs	r3, #2
 800023e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fd91 	bl	8000d6c <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000250:	f000 f930 	bl	80004b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000258:	2303      	movs	r3, #3
 800025a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000268:	463b      	mov	r3, r7
 800026a:	2104      	movs	r1, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f001 f99d 	bl	80015ac <HAL_RCC_ClockConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000278:	f000 f91c 	bl	80004b4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800027c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000280:	f000 fcf2 	bl	8000c68 <HAL_PWREx_ControlVoltageScaling>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800028a:	f000 f913 	bl	80004b4 <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3758      	adds	r7, #88	; 0x58
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b08a      	sub	sp, #40	; 0x28
 800029c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ae:	4b7c      	ldr	r3, [pc, #496]	; (80004a0 <MX_GPIO_Init+0x208>)
 80002b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b2:	4a7b      	ldr	r2, [pc, #492]	; (80004a0 <MX_GPIO_Init+0x208>)
 80002b4:	f043 0304 	orr.w	r3, r3, #4
 80002b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ba:	4b79      	ldr	r3, [pc, #484]	; (80004a0 <MX_GPIO_Init+0x208>)
 80002bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002be:	f003 0304 	and.w	r3, r3, #4
 80002c2:	613b      	str	r3, [r7, #16]
 80002c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002c6:	4b76      	ldr	r3, [pc, #472]	; (80004a0 <MX_GPIO_Init+0x208>)
 80002c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ca:	4a75      	ldr	r2, [pc, #468]	; (80004a0 <MX_GPIO_Init+0x208>)
 80002cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002d2:	4b73      	ldr	r3, [pc, #460]	; (80004a0 <MX_GPIO_Init+0x208>)
 80002d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	4b70      	ldr	r3, [pc, #448]	; (80004a0 <MX_GPIO_Init+0x208>)
 80002e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e2:	4a6f      	ldr	r2, [pc, #444]	; (80004a0 <MX_GPIO_Init+0x208>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ea:	4b6d      	ldr	r3, [pc, #436]	; (80004a0 <MX_GPIO_Init+0x208>)
 80002ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	60bb      	str	r3, [r7, #8]
 80002f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f6:	4b6a      	ldr	r3, [pc, #424]	; (80004a0 <MX_GPIO_Init+0x208>)
 80002f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fa:	4a69      	ldr	r2, [pc, #420]	; (80004a0 <MX_GPIO_Init+0x208>)
 80002fc:	f043 0302 	orr.w	r3, r3, #2
 8000300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000302:	4b67      	ldr	r3, [pc, #412]	; (80004a0 <MX_GPIO_Init+0x208>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000306:	f003 0302 	and.w	r3, r3, #2
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800030e:	4b64      	ldr	r3, [pc, #400]	; (80004a0 <MX_GPIO_Init+0x208>)
 8000310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000312:	4a63      	ldr	r2, [pc, #396]	; (80004a0 <MX_GPIO_Init+0x208>)
 8000314:	f043 0308 	orr.w	r3, r3, #8
 8000318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800031a:	4b61      	ldr	r3, [pc, #388]	; (80004a0 <MX_GPIO_Init+0x208>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031e:	f003 0308 	and.w	r3, r3, #8
 8000322:	603b      	str	r3, [r7, #0]
 8000324:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAP_CHG_EN_Pin|MCU_VI0_SEL_Pin|MCU_VI1_SEL_Pin|RS485A_TX_DE_Pin 
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 510f 	mov.w	r1, #9152	; 0x23c0
 800032c:	485d      	ldr	r0, [pc, #372]	; (80004a4 <MX_GPIO_Init+0x20c>)
 800032e:	f000 fc75 	bl	8000c1c <HAL_GPIO_WritePin>
                          |MCU_PRCH_VEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_PRT_EXP_GPIO_Port, NRST_PRT_EXP_Pin, GPIO_PIN_SET);
 8000332:	2201      	movs	r2, #1
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033a:	f000 fc6f 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_NCS1_Pin|RS485A_TX_NRE_Pin, GPIO_PIN_SET);
 800033e:	2201      	movs	r2, #1
 8000340:	f241 0101 	movw	r1, #4097	; 0x1001
 8000344:	4858      	ldr	r0, [pc, #352]	; (80004a8 <MX_GPIO_Init+0x210>)
 8000346:	f000 fc69 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VCAP_ADC_EN_GPIO_Port, VCAP_ADC_EN_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2104      	movs	r1, #4
 800034e:	4856      	ldr	r0, [pc, #344]	; (80004a8 <MX_GPIO_Init+0x210>)
 8000350:	f000 fc64 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PS_HV_EN_Pin|AIN0_24V_EN_Pin|AIN1_24V_EN_Pin|MCU_PKY_2MDM_Pin, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
 800035a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035e:	f000 fc5d 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_RST_2MDM_GPIO_Port, MCU_RST_2MDM_Pin, GPIO_PIN_RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	2104      	movs	r1, #4
 8000366:	4851      	ldr	r0, [pc, #324]	; (80004ac <MX_GPIO_Init+0x214>)
 8000368:	f000 fc58 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAP_CHG_EN_Pin MCU_VI0_SEL_Pin MCU_VI1_SEL_Pin RS485A_TX_DE_Pin 
                           MCU_PRCH_VEN_Pin */
  GPIO_InitStruct.Pin = CAP_CHG_EN_Pin|MCU_VI0_SEL_Pin|MCU_VI1_SEL_Pin|RS485A_TX_DE_Pin 
 800036c:	f44f 530f 	mov.w	r3, #9152	; 0x23c0
 8000370:	617b      	str	r3, [r7, #20]
                          |MCU_PRCH_VEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	2301      	movs	r3, #1
 8000374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	2300      	movs	r3, #0
 800037c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800037e:	f107 0314 	add.w	r3, r7, #20
 8000382:	4619      	mov	r1, r3
 8000384:	4847      	ldr	r0, [pc, #284]	; (80004a4 <MX_GPIO_Init+0x20c>)
 8000386:	f000 facf 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBAT_ADC_Pin MCU_AIN1_Pin VCAP_ADC_Pin */
  GPIO_InitStruct.Pin = VBAT_ADC_Pin|MCU_AIN1_Pin|VCAP_ADC_Pin;
 800038a:	2307      	movs	r3, #7
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	4619      	mov	r1, r3
 800039c:	4841      	ldr	r0, [pc, #260]	; (80004a4 <MX_GPIO_Init+0x20c>)
 800039e:	f000 fac3 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_DIN1_Pin MCU_TXD3_Pin MCU_RXD3_Pin MCU_DIN0_Pin 
                           MCU_DIN2_Pin MCU_DTR_Pin */
  GPIO_InitStruct.Pin = MCU_DIN1_Pin|MCU_TXD3_Pin|MCU_RXD3_Pin|MCU_DIN0_Pin 
 80003a2:	f641 4338 	movw	r3, #7224	; 0x1c38
 80003a6:	617b      	str	r3, [r7, #20]
                          |MCU_DIN2_Pin|MCU_DTR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b0:	f107 0314 	add.w	r3, r7, #20
 80003b4:	4619      	mov	r1, r3
 80003b6:	483b      	ldr	r0, [pc, #236]	; (80004a4 <MX_GPIO_Init+0x20c>)
 80003b8:	f000 fab6 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_RXD_Pin BLE_TXD_Pin MCU_TXD2_Pin MCU_RXD2_Pin 
                           MCU_SCLK1_Pin MCU_CTS3_Pin NINT_PRT_EXP_Pin BLE_CTS_Pin */
  GPIO_InitStruct.Pin = BLE_RXD_Pin|BLE_TXD_Pin|MCU_TXD2_Pin|MCU_RXD2_Pin 
 80003bc:	f248 436f 	movw	r3, #33903	; 0x846f
 80003c0:	617b      	str	r3, [r7, #20]
                          |MCU_SCLK1_Pin|MCU_CTS3_Pin|NINT_PRT_EXP_Pin|BLE_CTS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003c6:	2301      	movs	r3, #1
 80003c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	4619      	mov	r1, r3
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d4:	f000 faa8 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_AIN0_Pin */
  GPIO_InitStruct.Pin = MCU_AIN0_Pin;
 80003d8:	2310      	movs	r3, #16
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_AIN0_GPIO_Port, &GPIO_InitStruct);
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	4619      	mov	r1, r3
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ee:	f000 fa9b 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRST_PRT_EXP_Pin PS_HV_EN_Pin AIN0_24V_EN_Pin AIN1_24V_EN_Pin 
                           MCU_PKY_2MDM_Pin */
  GPIO_InitStruct.Pin = NRST_PRT_EXP_Pin|PS_HV_EN_Pin|AIN0_24V_EN_Pin|AIN1_24V_EN_Pin 
 80003f2:	f44f 53dc 	mov.w	r3, #7040	; 0x1b80
 80003f6:	617b      	str	r3, [r7, #20]
                          |MCU_PKY_2MDM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	2300      	movs	r3, #0
 8000402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	4619      	mov	r1, r3
 800040a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040e:	f000 fa8b 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_NCS1_Pin VCAP_ADC_EN_Pin RS485A_TX_NRE_Pin */
  GPIO_InitStruct.Pin = MCU_NCS1_Pin|VCAP_ADC_EN_Pin|RS485A_TX_NRE_Pin;
 8000412:	f241 0305 	movw	r3, #4101	; 0x1005
 8000416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000418:	2301      	movs	r3, #1
 800041a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000420:	2300      	movs	r3, #0
 8000422:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	4619      	mov	r1, r3
 800042a:	481f      	ldr	r0, [pc, #124]	; (80004a8 <MX_GPIO_Init+0x210>)
 800042c:	f000 fa7c 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_RTS3_Pin MCU_RXD_Pin MCU_TXD_Pin MCU_DIN3_Pin 
                           MCU_MISO1_Pin MCU_MOSI1_Pin BLE_RTS_Pin MCU_PB0_Pin 
                           MCU_PB1_Pin */
  GPIO_InitStruct.Pin = MCU_RTS3_Pin|MCU_RXD_Pin|MCU_TXD_Pin|MCU_DIN3_Pin 
 8000430:	f648 73b2 	movw	r3, #36786	; 0x8fb2
 8000434:	617b      	str	r3, [r7, #20]
                          |MCU_MISO1_Pin|MCU_MOSI1_Pin|BLE_RTS_Pin|MCU_PB0_Pin 
                          |MCU_PB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000436:	2300      	movs	r3, #0
 8000438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800043a:	2301      	movs	r3, #1
 800043c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043e:	f107 0314 	add.w	r3, r7, #20
 8000442:	4619      	mov	r1, r3
 8000444:	4818      	ldr	r0, [pc, #96]	; (80004a8 <MX_GPIO_Init+0x210>)
 8000446:	f000 fa6f 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCL_PRT_EXP_Pin SDA_PRT_EXP_Pin ADP_BAT_DET_Pin */
  GPIO_InitStruct.Pin = SCL_PRT_EXP_Pin|SDA_PRT_EXP_Pin|ADP_BAT_DET_Pin;
 800044a:	f246 0340 	movw	r3, #24640	; 0x6040
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	4619      	mov	r1, r3
 800045e:	4812      	ldr	r0, [pc, #72]	; (80004a8 <MX_GPIO_Init+0x210>)
 8000460:	f000 fa62 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_RST_2MDM_Pin */
  GPIO_InitStruct.Pin = MCU_RST_2MDM_Pin;
 8000464:	2304      	movs	r3, #4
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	2301      	movs	r3, #1
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2300      	movs	r3, #0
 8000472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_RST_2MDM_GPIO_Port, &GPIO_InitStruct);
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	4619      	mov	r1, r3
 800047a:	480c      	ldr	r0, [pc, #48]	; (80004ac <MX_GPIO_Init+0x214>)
 800047c:	f000 fa54 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_Pin */
  GPIO_InitStruct.Pin = BOOT_Pin;
 8000480:	2308      	movs	r3, #8
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	4619      	mov	r1, r3
 8000492:	4807      	ldr	r0, [pc, #28]	; (80004b0 <MX_GPIO_Init+0x218>)
 8000494:	f000 fa48 	bl	8000928 <HAL_GPIO_Init>

}
 8000498:	bf00      	nop
 800049a:	3728      	adds	r7, #40	; 0x28
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40021000 	.word	0x40021000
 80004a4:	48000800 	.word	0x48000800
 80004a8:	48000400 	.word	0x48000400
 80004ac:	48000c00 	.word	0x48000c00
 80004b0:	48001c00 	.word	0x48001c00

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
	...

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_MspInit+0x44>)
 80004cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <HAL_MspInit+0x44>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6613      	str	r3, [r2, #96]	; 0x60
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <HAL_MspInit+0x44>)
 80004d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_MspInit+0x44>)
 80004e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <HAL_MspInit+0x44>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ec:	6593      	str	r3, [r2, #88]	; 0x58
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_MspInit+0x44>)
 80004f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <HardFault_Handler+0x4>

08000520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <MemManage_Handler+0x4>

08000526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <BusFault_Handler+0x4>

0800052c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <UsageFault_Handler+0x4>

08000532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000560:	f000 f8bc 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}

08000568 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <SystemInit+0x64>)
 800056e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000572:	4a16      	ldr	r2, [pc, #88]	; (80005cc <SystemInit+0x64>)
 8000574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <SystemInit+0x68>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <SystemInit+0x68>)
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <SystemInit+0x68>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <SystemInit+0x68>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <SystemInit+0x68>)
 8000594:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000598:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800059c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <SystemInit+0x68>)
 80005a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <SystemInit+0x68>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <SystemInit+0x68>)
 80005ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <SystemInit+0x68>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <SystemInit+0x64>)
 80005ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005be:	609a      	str	r2, [r3, #8]
#endif
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00
 80005d0:	40021000 	.word	0x40021000

080005d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800060c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005da:	e003      	b.n	80005e4 <LoopCopyDataInit>

080005dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005e2:	3104      	adds	r1, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <LoopForever+0xa>)
	ldr	r3, =_edata
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005ec:	d3f6      	bcc.n	80005dc <CopyDataInit>
	ldr	r2, =_sbss
 80005ee:	4a0b      	ldr	r2, [pc, #44]	; (800061c <LoopForever+0x12>)
	b	LoopFillZerobss
 80005f0:	e002      	b.n	80005f8 <LoopFillZerobss>

080005f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005f4:	f842 3b04 	str.w	r3, [r2], #4

080005f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <LoopForever+0x16>)
	cmp	r2, r3
 80005fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005fc:	d3f9      	bcc.n	80005f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005fe:	f7ff ffb3 	bl	8000568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000602:	f001 f99f 	bl	8001944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000606:	f7ff fde5 	bl	80001d4 <main>

0800060a <LoopForever>:

LoopForever:
    b LoopForever
 800060a:	e7fe      	b.n	800060a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800060c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000610:	080019fc 	.word	0x080019fc
	ldr	r0, =_sdata
 8000614:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000618:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800061c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000620:	2000002c 	.word	0x2000002c

08000624 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC1_IRQHandler>
	...

08000628 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800062e:	2300      	movs	r3, #0
 8000630:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_Init+0x3c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <HAL_Init+0x3c>)
 8000638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800063c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063e:	2003      	movs	r0, #3
 8000640:	f000 f93e 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f80f 	bl	8000668 <HAL_InitTick>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000650:	2301      	movs	r3, #1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	e001      	b.n	800065a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000656:	f7ff ff35 	bl	80004c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800065a:	79fb      	ldrb	r3, [r7, #7]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40022000 	.word	0x40022000

08000668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <HAL_InitTick+0x68>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d022      	beq.n	80006c2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_InitTick+0x6c>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <HAL_InitTick+0x68>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000688:	fbb1 f3f3 	udiv	r3, r1, r3
 800068c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f93c 	bl	800090e <HAL_SYSTICK_Config>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d10f      	bne.n	80006bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b0f      	cmp	r3, #15
 80006a0:	d809      	bhi.n	80006b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a2:	2200      	movs	r2, #0
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	f04f 30ff 	mov.w	r0, #4294967295
 80006aa:	f000 f914 	bl	80008d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_InitTick+0x70>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	e007      	b.n	80006c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	73fb      	strb	r3, [r7, #15]
 80006ba:	e004      	b.n	80006c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e001      	b.n	80006c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x20>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4413      	add	r3, r2
 80006ea:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <HAL_IncTick+0x1c>)
 80006ec:	6013      	str	r3, [r2, #0]
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	20000028 	.word	0x20000028
 80006fc:	20000008 	.word	0x20000008

08000700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return uwTick;
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <HAL_GetTick+0x14>)
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000028 	.word	0x20000028

08000718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000720:	f7ff ffee 	bl	8000700 <HAL_GetTick>
 8000724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000730:	d004      	beq.n	800073c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <HAL_Delay+0x40>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	4413      	add	r3, r2
 800073a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800073c:	bf00      	nop
 800073e:	f7ff ffdf 	bl	8000700 <HAL_GetTick>
 8000742:	4602      	mov	r2, r0
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	429a      	cmp	r2, r3
 800074c:	d8f7      	bhi.n	800073e <HAL_Delay+0x26>
  {
  }
}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000008 	.word	0x20000008

0800075c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <__NVIC_SetPriorityGrouping+0x44>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000778:	4013      	ands	r3, r2
 800077a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078e:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	60d3      	str	r3, [r2, #12]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <__NVIC_GetPriorityGrouping+0x18>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	f003 0307 	and.w	r3, r3, #7
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	db0a      	blt.n	80007ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	490c      	ldr	r1, [pc, #48]	; (800080c <__NVIC_SetPriority+0x4c>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	0112      	lsls	r2, r2, #4
 80007e0:	b2d2      	uxtb	r2, r2
 80007e2:	440b      	add	r3, r1
 80007e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e8:	e00a      	b.n	8000800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4908      	ldr	r1, [pc, #32]	; (8000810 <__NVIC_SetPriority+0x50>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 030f 	and.w	r3, r3, #15
 80007f6:	3b04      	subs	r3, #4
 80007f8:	0112      	lsls	r2, r2, #4
 80007fa:	b2d2      	uxtb	r2, r2
 80007fc:	440b      	add	r3, r1
 80007fe:	761a      	strb	r2, [r3, #24]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000e100 	.word	0xe000e100
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	f1c3 0307 	rsb	r3, r3, #7
 800082e:	2b04      	cmp	r3, #4
 8000830:	bf28      	it	cs
 8000832:	2304      	movcs	r3, #4
 8000834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3304      	adds	r3, #4
 800083a:	2b06      	cmp	r3, #6
 800083c:	d902      	bls.n	8000844 <NVIC_EncodePriority+0x30>
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3b03      	subs	r3, #3
 8000842:	e000      	b.n	8000846 <NVIC_EncodePriority+0x32>
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	f04f 32ff 	mov.w	r2, #4294967295
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43da      	mvns	r2, r3
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	401a      	ands	r2, r3
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800085c:	f04f 31ff 	mov.w	r1, #4294967295
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	43d9      	mvns	r1, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	4313      	orrs	r3, r2
         );
}
 800086e:	4618      	mov	r0, r3
 8000870:	3724      	adds	r7, #36	; 0x24
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800088c:	d301      	bcc.n	8000892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088e:	2301      	movs	r3, #1
 8000890:	e00f      	b.n	80008b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <SysTick_Config+0x40>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089a:	210f      	movs	r1, #15
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f7ff ff8e 	bl	80007c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <SysTick_Config+0x40>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <SysTick_Config+0x40>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff47 	bl	800075c <__NVIC_SetPriorityGrouping>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008e8:	f7ff ff5c 	bl	80007a4 <__NVIC_GetPriorityGrouping>
 80008ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	68b9      	ldr	r1, [r7, #8]
 80008f2:	6978      	ldr	r0, [r7, #20]
 80008f4:	f7ff ff8e 	bl	8000814 <NVIC_EncodePriority>
 80008f8:	4602      	mov	r2, r0
 80008fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff5d 	bl	80007c0 <__NVIC_SetPriority>
}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ffb0 	bl	800087c <SysTick_Config>
 800091c:	4603      	mov	r3, r0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000936:	e154      	b.n	8000be2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	2101      	movs	r1, #1
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	fa01 f303 	lsl.w	r3, r1, r3
 8000944:	4013      	ands	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2b00      	cmp	r3, #0
 800094c:	f000 8146 	beq.w	8000bdc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d00b      	beq.n	8000970 <HAL_GPIO_Init+0x48>
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	2b02      	cmp	r3, #2
 800095e:	d007      	beq.n	8000970 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000964:	2b11      	cmp	r3, #17
 8000966:	d003      	beq.n	8000970 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b12      	cmp	r3, #18
 800096e:	d130      	bne.n	80009d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2203      	movs	r2, #3
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4013      	ands	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	68da      	ldr	r2, [r3, #12]
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4313      	orrs	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009a6:	2201      	movs	r2, #1
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4013      	ands	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	091b      	lsrs	r3, r3, #4
 80009bc:	f003 0201 	and.w	r2, r3, #1
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	2203      	movs	r2, #3
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d003      	beq.n	8000a12 <HAL_GPIO_Init+0xea>
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	2b12      	cmp	r3, #18
 8000a10:	d123      	bne.n	8000a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	08da      	lsrs	r2, r3, #3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3208      	adds	r2, #8
 8000a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	220f      	movs	r2, #15
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	691a      	ldr	r2, [r3, #16]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	08da      	lsrs	r2, r3, #3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3208      	adds	r2, #8
 8000a54:	6939      	ldr	r1, [r7, #16]
 8000a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	2203      	movs	r2, #3
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f003 0203 	and.w	r2, r3, #3
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 80a0 	beq.w	8000bdc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9c:	4b58      	ldr	r3, [pc, #352]	; (8000c00 <HAL_GPIO_Init+0x2d8>)
 8000a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa0:	4a57      	ldr	r2, [pc, #348]	; (8000c00 <HAL_GPIO_Init+0x2d8>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa8:	4b55      	ldr	r3, [pc, #340]	; (8000c00 <HAL_GPIO_Init+0x2d8>)
 8000aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ab4:	4a53      	ldr	r2, [pc, #332]	; (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	220f      	movs	r2, #15
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ade:	d019      	beq.n	8000b14 <HAL_GPIO_Init+0x1ec>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a49      	ldr	r2, [pc, #292]	; (8000c08 <HAL_GPIO_Init+0x2e0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d013      	beq.n	8000b10 <HAL_GPIO_Init+0x1e8>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a48      	ldr	r2, [pc, #288]	; (8000c0c <HAL_GPIO_Init+0x2e4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d00d      	beq.n	8000b0c <HAL_GPIO_Init+0x1e4>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a47      	ldr	r2, [pc, #284]	; (8000c10 <HAL_GPIO_Init+0x2e8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d007      	beq.n	8000b08 <HAL_GPIO_Init+0x1e0>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a46      	ldr	r2, [pc, #280]	; (8000c14 <HAL_GPIO_Init+0x2ec>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d101      	bne.n	8000b04 <HAL_GPIO_Init+0x1dc>
 8000b00:	2304      	movs	r3, #4
 8000b02:	e008      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b04:	2307      	movs	r3, #7
 8000b06:	e006      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e004      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b14:	2300      	movs	r3, #0
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	f002 0203 	and.w	r2, r2, #3
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	4093      	lsls	r3, r2
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b26:	4937      	ldr	r1, [pc, #220]	; (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b34:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b58:	4a2f      	ldr	r2, [pc, #188]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b5e:	4b2e      	ldr	r3, [pc, #184]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b82:	4a25      	ldr	r2, [pc, #148]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b88:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bac:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f47f aea3 	bne.w	8000938 <HAL_GPIO_Init+0x10>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000
 8000c08:	48000400 	.word	0x48000400
 8000c0c:	48000800 	.word	0x48000800
 8000c10:	48000c00 	.word	0x48000c00
 8000c14:	48001000 	.word	0x48001000
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c2c:	787b      	ldrb	r3, [r7, #1]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c38:	e002      	b.n	8000c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40007000 	.word	0x40007000

08000c68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c76:	d130      	bne.n	8000cda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c84:	d038      	beq.n	8000cf8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c8e:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2232      	movs	r2, #50	; 0x32
 8000c9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca6:	0c9b      	lsrs	r3, r3, #18
 8000ca8:	3301      	adds	r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cac:	e002      	b.n	8000cb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cc0:	d102      	bne.n	8000cc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1f2      	bne.n	8000cae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd4:	d110      	bne.n	8000cf8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e00f      	b.n	8000cfa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce6:	d007      	beq.n	8000cf8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cf0:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40007000 	.word	0x40007000
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	431bde83 	.word	0x431bde83

08000d14 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f023 0307 	bic.w	r3, r3, #7
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d101      	bne.n	8000d44 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000d40:	bf30      	wfi
 8000d42:	e002      	b.n	8000d4a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000d44:	bf40      	sev
    __WFE();
 8000d46:	bf20      	wfe
    __WFE();
 8000d48:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8000d50:	f023 0304 	bic.w	r3, r3, #4
 8000d54:	6113      	str	r3, [r2, #16]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40007000 	.word	0x40007000
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d102      	bne.n	8000d80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f000 bc11 	b.w	80015a2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d80:	4ba0      	ldr	r3, [pc, #640]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d8a:	4b9e      	ldr	r3, [pc, #632]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0310 	and.w	r3, r3, #16
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f000 80e4 	beq.w	8000f6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d007      	beq.n	8000db8 <HAL_RCC_OscConfig+0x4c>
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	2b0c      	cmp	r3, #12
 8000dac:	f040 808b 	bne.w	8000ec6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	f040 8087 	bne.w	8000ec6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000db8:	4b92      	ldr	r3, [pc, #584]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d005      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x64>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e3e8      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a1a      	ldr	r2, [r3, #32]
 8000dd4:	4b8b      	ldr	r3, [pc, #556]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d004      	beq.n	8000dea <HAL_RCC_OscConfig+0x7e>
 8000de0:	4b88      	ldr	r3, [pc, #544]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000de8:	e005      	b.n	8000df6 <HAL_RCC_OscConfig+0x8a>
 8000dea:	4b86      	ldr	r3, [pc, #536]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d223      	bcs.n	8000e42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a1b      	ldr	r3, [r3, #32]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fd40 	bl	8001884 <RCC_SetFlashLatencyFromMSIRange>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e3c9      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e0e:	4b7d      	ldr	r3, [pc, #500]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a7c      	ldr	r2, [pc, #496]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b7a      	ldr	r3, [pc, #488]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	4977      	ldr	r1, [pc, #476]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e2c:	4b75      	ldr	r3, [pc, #468]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	4972      	ldr	r1, [pc, #456]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
 8000e40:	e025      	b.n	8000e8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e42:	4b70      	ldr	r3, [pc, #448]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a6f      	ldr	r2, [pc, #444]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000e48:	f043 0308 	orr.w	r3, r3, #8
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	4b6d      	ldr	r3, [pc, #436]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	496a      	ldr	r1, [pc, #424]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e60:	4b68      	ldr	r3, [pc, #416]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	4965      	ldr	r1, [pc, #404]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d109      	bne.n	8000e8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a1b      	ldr	r3, [r3, #32]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 fd00 	bl	8001884 <RCC_SetFlashLatencyFromMSIRange>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e389      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e8e:	f000 fc6f 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 8000e92:	4601      	mov	r1, r0
 8000e94:	4b5b      	ldr	r3, [pc, #364]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	4a5a      	ldr	r2, [pc, #360]	; (8001008 <HAL_RCC_OscConfig+0x29c>)
 8000ea0:	5cd3      	ldrb	r3, [r2, r3]
 8000ea2:	f003 031f 	and.w	r3, r3, #31
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	4a58      	ldr	r2, [pc, #352]	; (800100c <HAL_RCC_OscConfig+0x2a0>)
 8000eac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000eae:	4b58      	ldr	r3, [pc, #352]	; (8001010 <HAL_RCC_OscConfig+0x2a4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fbd8 	bl	8000668 <HAL_InitTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d052      	beq.n	8000f68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	e36d      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d032      	beq.n	8000f34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ece:	4b4d      	ldr	r3, [pc, #308]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a4c      	ldr	r2, [pc, #304]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eda:	f7ff fc11 	bl	8000700 <HAL_GetTick>
 8000ede:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ee0:	e008      	b.n	8000ef4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ee2:	f7ff fc0d 	bl	8000700 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e356      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ef4:	4b43      	ldr	r3, [pc, #268]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0f0      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f00:	4b40      	ldr	r3, [pc, #256]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a3f      	ldr	r2, [pc, #252]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	493a      	ldr	r1, [pc, #232]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	4935      	ldr	r1, [pc, #212]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	604b      	str	r3, [r1, #4]
 8000f32:	e01a      	b.n	8000f6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f34:	4b33      	ldr	r3, [pc, #204]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a32      	ldr	r2, [pc, #200]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000f3a:	f023 0301 	bic.w	r3, r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fbde 	bl	8000700 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f48:	f7ff fbda 	bl	8000700 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e323      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f0      	bne.n	8000f48 <HAL_RCC_OscConfig+0x1dc>
 8000f66:	e000      	b.n	8000f6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d073      	beq.n	800105e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d005      	beq.n	8000f88 <HAL_RCC_OscConfig+0x21c>
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2b0c      	cmp	r3, #12
 8000f80:	d10e      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d10b      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d063      	beq.n	800105c <HAL_RCC_OscConfig+0x2f0>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d15f      	bne.n	800105c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e300      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa8:	d106      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x24c>
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a15      	ldr	r2, [pc, #84]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e01d      	b.n	8000ff4 <HAL_RCC_OscConfig+0x288>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc0:	d10c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x270>
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a0c      	ldr	r2, [pc, #48]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e00b      	b.n	8000ff4 <HAL_RCC_OscConfig+0x288>
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a08      	ldr	r2, [pc, #32]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a05      	ldr	r2, [pc, #20]	; (8001004 <HAL_RCC_OscConfig+0x298>)
 8000fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d01b      	beq.n	8001034 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fb80 	bl	8000700 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001002:	e010      	b.n	8001026 <HAL_RCC_OscConfig+0x2ba>
 8001004:	40021000 	.word	0x40021000
 8001008:	080019b4 	.word	0x080019b4
 800100c:	20000000 	.word	0x20000000
 8001010:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fb74 	bl	8000700 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b64      	cmp	r3, #100	; 0x64
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e2bd      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001026:	4baf      	ldr	r3, [pc, #700]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f0      	beq.n	8001014 <HAL_RCC_OscConfig+0x2a8>
 8001032:	e014      	b.n	800105e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001034:	f7ff fb64 	bl	8000700 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fb60 	bl	8000700 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e2a9      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800104e:	4ba5      	ldr	r3, [pc, #660]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f0      	bne.n	800103c <HAL_RCC_OscConfig+0x2d0>
 800105a:	e000      	b.n	800105e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d060      	beq.n	800112c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d005      	beq.n	800107c <HAL_RCC_OscConfig+0x310>
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2b0c      	cmp	r3, #12
 8001074:	d119      	bne.n	80010aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d116      	bne.n	80010aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800107c:	4b99      	ldr	r3, [pc, #612]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001084:	2b00      	cmp	r3, #0
 8001086:	d005      	beq.n	8001094 <HAL_RCC_OscConfig+0x328>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e286      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001094:	4b93      	ldr	r3, [pc, #588]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	061b      	lsls	r3, r3, #24
 80010a2:	4990      	ldr	r1, [pc, #576]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 80010a4:	4313      	orrs	r3, r2
 80010a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010a8:	e040      	b.n	800112c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d023      	beq.n	80010fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b2:	4b8c      	ldr	r3, [pc, #560]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a8b      	ldr	r2, [pc, #556]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010be:	f7ff fb1f 	bl	8000700 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c6:	f7ff fb1b 	bl	8000700 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e264      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010d8:	4b82      	ldr	r3, [pc, #520]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0f0      	beq.n	80010c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e4:	4b7f      	ldr	r3, [pc, #508]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	061b      	lsls	r3, r3, #24
 80010f2:	497c      	ldr	r1, [pc, #496]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
 80010f8:	e018      	b.n	800112c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010fa:	4b7a      	ldr	r3, [pc, #488]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a79      	ldr	r2, [pc, #484]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001106:	f7ff fafb 	bl	8000700 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff faf7 	bl	8000700 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e240      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001120:	4b70      	ldr	r3, [pc, #448]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f0      	bne.n	800110e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	2b00      	cmp	r3, #0
 8001136:	d03c      	beq.n	80011b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d01c      	beq.n	800117a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001140:	4b68      	ldr	r3, [pc, #416]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001146:	4a67      	ldr	r2, [pc, #412]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001150:	f7ff fad6 	bl	8000700 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001158:	f7ff fad2 	bl	8000700 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e21b      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800116a:	4b5e      	ldr	r3, [pc, #376]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 800116c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0ef      	beq.n	8001158 <HAL_RCC_OscConfig+0x3ec>
 8001178:	e01b      	b.n	80011b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800117a:	4b5a      	ldr	r3, [pc, #360]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 800117c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001180:	4a58      	ldr	r2, [pc, #352]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800118a:	f7ff fab9 	bl	8000700 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001192:	f7ff fab5 	bl	8000700 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e1fe      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011a4:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 80011a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1ef      	bne.n	8001192 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 80a6 	beq.w	800130c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011c4:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d10d      	bne.n	80011ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d0:	4b44      	ldr	r3, [pc, #272]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 80011d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d4:	4a43      	ldr	r2, [pc, #268]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 80011d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011da:	6593      	str	r3, [r2, #88]	; 0x58
 80011dc:	4b41      	ldr	r3, [pc, #260]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 80011de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011e8:	2301      	movs	r3, #1
 80011ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ec:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <HAL_RCC_OscConfig+0x57c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d118      	bne.n	800122a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011f8:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <HAL_RCC_OscConfig+0x57c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a3a      	ldr	r2, [pc, #232]	; (80012e8 <HAL_RCC_OscConfig+0x57c>)
 80011fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001202:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001204:	f7ff fa7c 	bl	8000700 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120c:	f7ff fa78 	bl	8000700 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e1c1      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <HAL_RCC_OscConfig+0x57c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d108      	bne.n	8001244 <HAL_RCC_OscConfig+0x4d8>
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001238:	4a2a      	ldr	r2, [pc, #168]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001242:	e024      	b.n	800128e <HAL_RCC_OscConfig+0x522>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b05      	cmp	r3, #5
 800124a:	d110      	bne.n	800126e <HAL_RCC_OscConfig+0x502>
 800124c:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 800124e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001252:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 800125e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001262:	4a20      	ldr	r2, [pc, #128]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800126c:	e00f      	b.n	800128e <HAL_RCC_OscConfig+0x522>
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001284:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 8001286:	f023 0304 	bic.w	r3, r3, #4
 800128a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d016      	beq.n	80012c4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001296:	f7ff fa33 	bl	8000700 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129e:	f7ff fa2f 	bl	8000700 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e176      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_RCC_OscConfig+0x578>)
 80012b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0ed      	beq.n	800129e <HAL_RCC_OscConfig+0x532>
 80012c2:	e01a      	b.n	80012fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c4:	f7ff fa1c 	bl	8000700 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012ca:	e00f      	b.n	80012ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012cc:	f7ff fa18 	bl	8000700 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d906      	bls.n	80012ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e15f      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012ec:	4baa      	ldr	r3, [pc, #680]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 80012ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1e8      	bne.n	80012cc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012fa:	7ffb      	ldrb	r3, [r7, #31]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d105      	bne.n	800130c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001300:	4ba5      	ldr	r3, [pc, #660]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001304:	4aa4      	ldr	r2, [pc, #656]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800130a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0320 	and.w	r3, r3, #32
 8001314:	2b00      	cmp	r3, #0
 8001316:	d03c      	beq.n	8001392 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	2b00      	cmp	r3, #0
 800131e:	d01c      	beq.n	800135a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001320:	4b9d      	ldr	r3, [pc, #628]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001326:	4a9c      	ldr	r2, [pc, #624]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001330:	f7ff f9e6 	bl	8000700 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001338:	f7ff f9e2 	bl	8000700 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e12b      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800134a:	4b93      	ldr	r3, [pc, #588]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 800134c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0ef      	beq.n	8001338 <HAL_RCC_OscConfig+0x5cc>
 8001358:	e01b      	b.n	8001392 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800135a:	4b8f      	ldr	r3, [pc, #572]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 800135c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001360:	4a8d      	ldr	r2, [pc, #564]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136a:	f7ff f9c9 	bl	8000700 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001372:	f7ff f9c5 	bl	8000700 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e10e      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001384:	4b84      	ldr	r3, [pc, #528]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001386:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1ef      	bne.n	8001372 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8102 	beq.w	80015a0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	f040 80c5 	bne.w	8001530 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013a6:	4b7c      	ldr	r3, [pc, #496]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f003 0203 	and.w	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d12c      	bne.n	8001414 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	3b01      	subs	r3, #1
 80013c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d123      	bne.n	8001414 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013d8:	429a      	cmp	r2, r3
 80013da:	d11b      	bne.n	8001414 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d113      	bne.n	8001414 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f6:	085b      	lsrs	r3, r3, #1
 80013f8:	3b01      	subs	r3, #1
 80013fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d109      	bne.n	8001414 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	085b      	lsrs	r3, r3, #1
 800140c:	3b01      	subs	r3, #1
 800140e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001410:	429a      	cmp	r2, r3
 8001412:	d067      	beq.n	80014e4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2b0c      	cmp	r3, #12
 8001418:	d062      	beq.n	80014e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800141a:	4b5f      	ldr	r3, [pc, #380]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0bb      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800142a:	4b5b      	ldr	r3, [pc, #364]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a5a      	ldr	r2, [pc, #360]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001430:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001434:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001436:	f7ff f963 	bl	8000700 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff f95f 	bl	8000700 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e0a8      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001450:	4b51      	ldr	r3, [pc, #324]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800145c:	4b4e      	ldr	r3, [pc, #312]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	4b4e      	ldr	r3, [pc, #312]	; (800159c <HAL_RCC_OscConfig+0x830>)
 8001462:	4013      	ands	r3, r2
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800146c:	3a01      	subs	r2, #1
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	4311      	orrs	r1, r2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001476:	0212      	lsls	r2, r2, #8
 8001478:	4311      	orrs	r1, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800147e:	0852      	lsrs	r2, r2, #1
 8001480:	3a01      	subs	r2, #1
 8001482:	0552      	lsls	r2, r2, #21
 8001484:	4311      	orrs	r1, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800148a:	0852      	lsrs	r2, r2, #1
 800148c:	3a01      	subs	r2, #1
 800148e:	0652      	lsls	r2, r2, #25
 8001490:	4311      	orrs	r1, r2
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001496:	06d2      	lsls	r2, r2, #27
 8001498:	430a      	orrs	r2, r1
 800149a:	493f      	ldr	r1, [pc, #252]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 800149c:	4313      	orrs	r3, r2
 800149e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014a0:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a3c      	ldr	r2, [pc, #240]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 80014a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014ac:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	4a39      	ldr	r2, [pc, #228]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 80014b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014b8:	f7ff f922 	bl	8000700 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff f91e 	bl	8000700 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e067      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d2:	4b31      	ldr	r3, [pc, #196]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014de:	e05f      	b.n	80015a0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e05e      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e4:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d157      	bne.n	80015a0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014f0:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a28      	ldr	r2, [pc, #160]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 80014f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014fc:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4a25      	ldr	r2, [pc, #148]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001506:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001508:	f7ff f8fa 	bl	8000700 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff f8f6 	bl	8000700 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e03f      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x7a4>
 800152e:	e037      	b.n	80015a0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2b0c      	cmp	r3, #12
 8001534:	d02d      	beq.n	8001592 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a17      	ldr	r2, [pc, #92]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 800153c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001540:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d105      	bne.n	800155a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001554:	f023 0303 	bic.w	r3, r3, #3
 8001558:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001560:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001568:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff f8c9 	bl	8000700 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001572:	f7ff f8c5 	bl	8000700 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e00e      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <HAL_RCC_OscConfig+0x82c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x806>
 8001590:	e006      	b.n	80015a0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e005      	b.n	80015a2 <HAL_RCC_OscConfig+0x836>
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop

080015ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0c8      	b.n	8001752 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015c0:	4b66      	ldr	r3, [pc, #408]	; (800175c <HAL_RCC_ClockConfig+0x1b0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d910      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b63      	ldr	r3, [pc, #396]	; (800175c <HAL_RCC_ClockConfig+0x1b0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 0207 	bic.w	r2, r3, #7
 80015d6:	4961      	ldr	r1, [pc, #388]	; (800175c <HAL_RCC_ClockConfig+0x1b0>)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b5f      	ldr	r3, [pc, #380]	; (800175c <HAL_RCC_ClockConfig+0x1b0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0b0      	b.n	8001752 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d04c      	beq.n	8001696 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b03      	cmp	r3, #3
 8001602:	d107      	bne.n	8001614 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001604:	4b56      	ldr	r3, [pc, #344]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d121      	bne.n	8001654 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e09e      	b.n	8001752 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d107      	bne.n	800162c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800161c:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d115      	bne.n	8001654 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e092      	b.n	8001752 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d107      	bne.n	8001644 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001634:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d109      	bne.n	8001654 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e086      	b.n	8001752 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	4b46      	ldr	r3, [pc, #280]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e07e      	b.n	8001752 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001654:	4b42      	ldr	r3, [pc, #264]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f023 0203 	bic.w	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	493f      	ldr	r1, [pc, #252]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001666:	f7ff f84b 	bl	8000700 <HAL_GetTick>
 800166a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166c:	e00a      	b.n	8001684 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166e:	f7ff f847 	bl	8000700 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f241 3288 	movw	r2, #5000	; 0x1388
 800167c:	4293      	cmp	r3, r2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e066      	b.n	8001752 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001684:	4b36      	ldr	r3, [pc, #216]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 020c 	and.w	r2, r3, #12
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	429a      	cmp	r2, r3
 8001694:	d1eb      	bne.n	800166e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a2:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	492c      	ldr	r1, [pc, #176]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <HAL_RCC_ClockConfig+0x1b0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d210      	bcs.n	80016e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <HAL_RCC_ClockConfig+0x1b0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 0207 	bic.w	r2, r3, #7
 80016ca:	4924      	ldr	r1, [pc, #144]	; (800175c <HAL_RCC_ClockConfig+0x1b0>)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_RCC_ClockConfig+0x1b0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e036      	b.n	8001752 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4918      	ldr	r1, [pc, #96]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d009      	beq.n	8001722 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4910      	ldr	r1, [pc, #64]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001722:	f000 f825 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 8001726:	4601      	mov	r1, r0
 8001728:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_RCC_ClockConfig+0x1b4>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	4a0c      	ldr	r2, [pc, #48]	; (8001764 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	5cd3      	ldrb	r3, [r2, r3]
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	fa21 f303 	lsr.w	r3, r1, r3
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe ff8e 	bl	8000668 <HAL_InitTick>
 800174c:	4603      	mov	r3, r0
 800174e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001750:	7afb      	ldrb	r3, [r7, #11]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40022000 	.word	0x40022000
 8001760:	40021000 	.word	0x40021000
 8001764:	080019b4 	.word	0x080019b4
 8001768:	20000000 	.word	0x20000000
 800176c:	20000004 	.word	0x20000004

08001770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177e:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <HAL_RCC_GetSysClockFreq+0x104>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001788:	4b3a      	ldr	r3, [pc, #232]	; (8001874 <HAL_RCC_GetSysClockFreq+0x104>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x34>
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2b0c      	cmp	r3, #12
 800179c:	d121      	bne.n	80017e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d11e      	bne.n	80017e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017a4:	4b33      	ldr	r3, [pc, #204]	; (8001874 <HAL_RCC_GetSysClockFreq+0x104>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_RCC_GetSysClockFreq+0x104>)
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	e005      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017c0:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <HAL_RCC_GetSysClockFreq+0x104>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017cc:	4a2a      	ldr	r2, [pc, #168]	; (8001878 <HAL_RCC_GetSysClockFreq+0x108>)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10d      	bne.n	80017f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d102      	bne.n	80017ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_RCC_GetSysClockFreq+0x10c>)
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	e004      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_RCC_GetSysClockFreq+0x110>)
 80017f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	d133      	bne.n	8001866 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017fe:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_RCC_GetSysClockFreq+0x104>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d002      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0xa4>
 800180e:	2b03      	cmp	r3, #3
 8001810:	d003      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0xaa>
 8001812:	e005      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001816:	617b      	str	r3, [r7, #20]
      break;
 8001818:	e005      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_RCC_GetSysClockFreq+0x110>)
 800181c:	617b      	str	r3, [r7, #20]
      break;
 800181e:	e002      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	617b      	str	r3, [r7, #20]
      break;
 8001824:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_RCC_GetSysClockFreq+0x104>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	3301      	adds	r3, #1
 8001832:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_RCC_GetSysClockFreq+0x104>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	fb02 f203 	mul.w	r2, r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_RCC_GetSysClockFreq+0x104>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0e5b      	lsrs	r3, r3, #25
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	3301      	adds	r3, #1
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	fbb2 f3f3 	udiv	r3, r2, r3
 8001864:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001866:	69bb      	ldr	r3, [r7, #24]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3724      	adds	r7, #36	; 0x24
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	40021000 	.word	0x40021000
 8001878:	080019c4 	.word	0x080019c4
 800187c:	00f42400 	.word	0x00f42400
 8001880:	007a1200 	.word	0x007a1200

08001884 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800189c:	f7ff f9d6 	bl	8000c4c <HAL_PWREx_GetVoltageRange>
 80018a0:	6178      	str	r0, [r7, #20]
 80018a2:	e014      	b.n	80018ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	4a24      	ldr	r2, [pc, #144]	; (800193c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ae:	6593      	str	r3, [r2, #88]	; 0x58
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018bc:	f7ff f9c6 	bl	8000c4c <HAL_PWREx_GetVoltageRange>
 80018c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018d4:	d10b      	bne.n	80018ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b80      	cmp	r3, #128	; 0x80
 80018da:	d919      	bls.n	8001910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2ba0      	cmp	r3, #160	; 0xa0
 80018e0:	d902      	bls.n	80018e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018e2:	2302      	movs	r3, #2
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	e013      	b.n	8001910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018e8:	2301      	movs	r3, #1
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	e010      	b.n	8001910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b80      	cmp	r3, #128	; 0x80
 80018f2:	d902      	bls.n	80018fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018f4:	2303      	movs	r3, #3
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	e00a      	b.n	8001910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b80      	cmp	r3, #128	; 0x80
 80018fe:	d102      	bne.n	8001906 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001900:	2302      	movs	r3, #2
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	e004      	b.n	8001910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b70      	cmp	r3, #112	; 0x70
 800190a:	d101      	bne.n	8001910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800190c:	2301      	movs	r3, #1
 800190e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f023 0207 	bic.w	r2, r3, #7
 8001918:	4909      	ldr	r1, [pc, #36]	; (8001940 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	429a      	cmp	r2, r3
 800192c:	d001      	beq.n	8001932 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	40022000 	.word	0x40022000

08001944 <__libc_init_array>:
 8001944:	b570      	push	{r4, r5, r6, lr}
 8001946:	4e0d      	ldr	r6, [pc, #52]	; (800197c <__libc_init_array+0x38>)
 8001948:	4c0d      	ldr	r4, [pc, #52]	; (8001980 <__libc_init_array+0x3c>)
 800194a:	1ba4      	subs	r4, r4, r6
 800194c:	10a4      	asrs	r4, r4, #2
 800194e:	2500      	movs	r5, #0
 8001950:	42a5      	cmp	r5, r4
 8001952:	d109      	bne.n	8001968 <__libc_init_array+0x24>
 8001954:	4e0b      	ldr	r6, [pc, #44]	; (8001984 <__libc_init_array+0x40>)
 8001956:	4c0c      	ldr	r4, [pc, #48]	; (8001988 <__libc_init_array+0x44>)
 8001958:	f000 f820 	bl	800199c <_init>
 800195c:	1ba4      	subs	r4, r4, r6
 800195e:	10a4      	asrs	r4, r4, #2
 8001960:	2500      	movs	r5, #0
 8001962:	42a5      	cmp	r5, r4
 8001964:	d105      	bne.n	8001972 <__libc_init_array+0x2e>
 8001966:	bd70      	pop	{r4, r5, r6, pc}
 8001968:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800196c:	4798      	blx	r3
 800196e:	3501      	adds	r5, #1
 8001970:	e7ee      	b.n	8001950 <__libc_init_array+0xc>
 8001972:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001976:	4798      	blx	r3
 8001978:	3501      	adds	r5, #1
 800197a:	e7f2      	b.n	8001962 <__libc_init_array+0x1e>
 800197c:	080019f4 	.word	0x080019f4
 8001980:	080019f4 	.word	0x080019f4
 8001984:	080019f4 	.word	0x080019f4
 8001988:	080019f8 	.word	0x080019f8

0800198c <memset>:
 800198c:	4402      	add	r2, r0
 800198e:	4603      	mov	r3, r0
 8001990:	4293      	cmp	r3, r2
 8001992:	d100      	bne.n	8001996 <memset+0xa>
 8001994:	4770      	bx	lr
 8001996:	f803 1b01 	strb.w	r1, [r3], #1
 800199a:	e7f9      	b.n	8001990 <memset+0x4>

0800199c <_init>:
 800199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800199e:	bf00      	nop
 80019a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019a2:	bc08      	pop	{r3}
 80019a4:	469e      	mov	lr, r3
 80019a6:	4770      	bx	lr

080019a8 <_fini>:
 80019a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019aa:	bf00      	nop
 80019ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ae:	bc08      	pop	{r3}
 80019b0:	469e      	mov	lr, r3
 80019b2:	4770      	bx	lr
